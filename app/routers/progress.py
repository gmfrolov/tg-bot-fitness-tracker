from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from app.states import WaterLog, FoodLog
from app.utils.food_api import get_food_info
from app.storage import users, WORKOUTS
from app.utils.calculations import calc_workout_calories

router = Router()

@router.message(Command('log_water'))
async def start_log_water(message: Message, state: FSMContext):
    parts = message.text.split(maxsplit=1)
    if len(parts) > 1:
        try:
            amount = float(parts[1])
            if "logged_water" not in users[message.from_user.id]:
                users[message.from_user.id]["logged_water"] = int(amount)
            else:
                users[message.from_user.id]["logged_water"] += int(amount)
            
            await message.reply(
                    f"–ó–∞–ø–∏—Å–∞–Ω–æ {amount} –º–ª –≤–æ–¥—ã\n"
                    f'–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {users[message.from_user.id]["water_goal"] - users[message.from_user.id]["logged_water"]}'
                )
        
        except ValueError:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
    else:
        await message.reply("–°–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –≤—ã–ø–∏—Ç–æ?")
        await state.set_state(WaterLog.water)

@router.message(WaterLog.water)
async def end_log_water(message: Message, state: FSMContext):
    if "logged_water" not in users[message.from_user.id]:
         users[message.from_user.id]["logged_water"] = int(message.text)
    else:
        users[message.from_user.id]["logged_water"] += int(message.text)
    await message.reply(
        f"–ó–∞–ø–∏—Å–∞–Ω–æ {int(message.text)} –º–ª –≤–æ–¥—ã\n"
        f'–í–∞–º –æ—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {users[message.from_user.id]["water_goal"] - users[message.from_user.id]["logged_water"]}'
        )
    await state.clear()

# –í–≤–æ–¥ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
@router.message(Command('log_food'))
async def start_log_food(message: Message, state: FSMContext):
    parts = message.text.split(maxsplit=1)
    if len(parts) > 1:
        product_name = parts[1]
        info_product = await get_food_info(product_name)
        if info_product:
            await state.update_data(calories=info_product["calories"])
            await message.reply(f'{info_product["name"]} ‚Äî {info_product["calories"]} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?')
            await state.set_state(FoodLog.product_weight)
        else:
            await message.reply(f'–¢–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å :(\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
            await state.set_state(FoodLog.product_name)

    else:
        await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/–±–ª—é–¥–∞:')
        await state.set_state(FoodLog.product_name)

# –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
@router.message(FoodLog.product_name)
async def end_log_name_food(message: Message, state: FSMContext):
    product_name = message.text
    info_product = await get_food_info(product_name)
    if info_product:
        await state.update_data(calories=info_product["calories"])
        await message.reply(f'{info_product["name"]} ‚Äî {info_product["calories"]} –∫–∫–∞–ª –Ω–∞ 100 –≥.\n–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?')
        await state.set_state(FoodLog.product_weight)
    else:
        await message.reply(f'–¢–∞–∫–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –Ω–∞—à–ª–æ—Å—å :(\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        await state.set_state(FoodLog.product_name)


@router.message(FoodLog.product_weight)
async def end_log_weight_food(message: Message, state: FSMContext):
    data = await state.get_data()
    if "logged_calories" not in users[message.from_user.id]:
         users[message.from_user.id]["logged_calories"] = data['calories'] * int(message.text) / 100
    else:
        users[message.from_user.id]["logged_calories"] += data['calories'] * int(message.text) / 100
    await message.reply(f'–ó–∞–ø–∏—Å–∞–Ω–æ: {data["calories"] * int(message.text) / 100} –∫–∫–∞–ª')
    await state.clear()


@router.message(Command("log_workout"))
async def log_workout_cmd(message: Message, command: CommandObject):
    if command.args:
        try:
            parts = command.args.rsplit(" ", maxsplit=1)
            workout_type = parts[0].lower()
            duration = int(parts[1])

            if workout_type not in WORKOUTS:
                await message.answer(
                    f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {', '.join(WORKOUTS)}"
                )
                return

            calories = calc_workout_calories(workout_type, duration)
            users[message.from_user.id]["burned_calories"] = users[message.from_user.id].get("burned_calories", 0) + calories
            await message.answer(f"–í—ã —Å–æ–∂–≥–ª–∏ {calories} –∫–∫–∞–ª –∑–∞ {duration} –º–∏–Ω—É—Ç")
        except (IndexError, ValueError):
            await message.answer(
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /log_workout <—Ç–∏–ø> <–≤—Ä–µ–º—è>\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {', '.join(WORKOUTS)}"
            )
    else:
        # –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        await message.answer(
            "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {', '.join(WORKOUTS)}\n"
            "–ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: /log_workout –±–µ–≥ 30"
        )


@router.message(Command("check_progress"))
async def check_progress_cmd(message: Message):
    data = users[message.from_user.id]
    await message.reply(
            f'üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n'
            f'–í–æ–¥–∞:\n'
            f'- –í—ã–ø–∏—Ç–æ: {data["logged_water"]} –º–ª –∏–∑ {data["calorie_goal"]} –º–ª.\n'
            f'- –û—Å—Ç–∞–ª–æ—Å—å: {data["calorie_goal"] - data["logged_water"]} –º–ª.\n\n'
            f'–ö–∞–ª–æ—Ä–∏–∏:\n'
            f'- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {data["logged_calories"]} –∫–∫–∞–ª –∏–∑ {data["calorie_goal"]} –∫–∫–∞–ª.\n'
            f'- –°–æ–∂–∂–µ–Ω–æ: {data["burned_calories"]} –∫–∫–∞–ª.\n'
            f'- –ë–∞–ª–∞–Ω—Å: {data["logged_calories"] - data["burned_calories"]} –∫–∫–∞–ª.'
        )
